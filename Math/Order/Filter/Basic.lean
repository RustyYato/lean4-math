import Math.Data.Set.Finite
import Math.Function.Basic
import Math.Order.Partial
import Math.Order.Lattice.Complete

structure Filter (Œ±: Type*) [LE Œ±] [Inf Œ±] [LawfulInf Œ±] where
  set: Set Œ±
  nonempty: set.Nonempty
  mem_upward : ‚àÄ{x}, x ‚àà set -> ‚àÄ{y}, x ‚â§ y -> y ‚àà set
  mem_inf: ‚àÄ{x y}, x ‚àà set -> y ‚àà set -> x ‚äì y ‚àà set

namespace Filter

variable {Œ±: Type*} [LE Œ±] [Inf Œ±] [LawfulInf Œ±] {f g: Filter Œ±} {s t: Œ±}

instance : Membership Œ± (Filter Œ±) where
  mem F U := U ‚àà F.set

@[simp]
def top_mem [Top Œ±] [LawfulTop Œ±]: ‚ä§ ‚àà f := by
  have ‚ü®x, x_in_sets‚ü© := f.nonempty
  apply mem_upward
  assumption
  apply le_top

instance [Top Œ±] [LawfulTop Œ±] : Inhabited f.set where
  default := ‚ü®‚ä§, top_mem‚ü©

def set_inj : Function.Injective (Filter.set (Œ± := Œ±)) := by
  intro x y h
  cases x; cases y
  congr

def mem_set : ‚àÄx, x ‚àà f ‚Üî x ‚àà f.set := by
  intro x
  rfl

@[ext]
def ext : (‚àÄ{x}, x ‚àà f ‚Üî x ‚àà g) -> f = g := by
  intro h
  apply set_inj
  ext
  apply h

protected def copy (f : Filter Œ±) (S : Set Œ±) (hmem : ‚àÄ{s}, s ‚àà S ‚Üî s ‚àà f) : Filter Œ± := by
  have : S = f.set := Set.ext _ _ (fun _ => hmem)
  refine ‚ü®S, ?_, ?_, ?_‚ü©
  rw [this]; exact f.nonempty
  rw [this]; exact f.mem_upward
  rw [this]; exact f.mem_inf

def copy_eq {S} (hmem : ‚àÄ{s}, s ‚àà S ‚Üî s ‚àà f) : f.copy S hmem = f := Filter.ext hmem
@[simp] def mem_copy {S hmem} : s ‚àà f.copy S hmem ‚Üî s ‚àà S := Iff.rfl

@[simp]
theorem inter_mem_iff : s ‚äì t ‚àà f ‚Üî s ‚àà f ‚àß t ‚àà f := by
  apply Iff.intro
  intro h
  apply And.intro
  apply mem_upward
  assumption
  apply inf_le_left
  apply mem_of_superset
  assumption
  apply Set.inter_sub_right
  intro ‚ü®_, _‚ü©
  apply inter_mem <;> assumption

@[simp]
theorem sInter_mem {s : Set (Set Œ±)} (hfin : s.IsFinite) : ‚ãÇ s ‚àà f ‚Üî ‚àÄ x ‚àà s, x ‚àà f := by
  apply hfin.induction
  case nil =>
    simp [Set.sInter_empty]
    intros
    contradiction
  case cons =>
    intro x xs x_not_in_xs xs_finite ih
    simp [Set.sInter_insert, Set.mem_insert, ih]

theorem exists_mem_subset_iff : (‚àÉ t ‚àà f, t ‚äÜ s) ‚Üî s ‚àà f :=
  ‚ü®fun ‚ü®_, ht, ts‚ü© => mem_of_superset ht ts, fun hs => ‚ü®s, hs, Set.sub_refl _‚ü©‚ü©

end Filter

namespace Filter

variable {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w} {Œ¥ : Type*} {Œπ : Sort x}
variable {Œ±: Type*} {f g: Filter Œ±} {s t: Set Œ±}

section Principal

/-- The principal filter of `s` is the collection of all supersets of `s`. -/
def principal (s : Set Œ±) : Filter Œ± where
  sets := .mk fun x => s ‚äÜ x
  sets_nonempty := ‚ü®s, Set.sub_refl _‚ü©
  sets_of_superset := Set.sub_trans
  inter_sets := by
    intro x y
    simp [‚ÜêSet.sub_inter]
    apply And.intro

scoped notation "ùìü" => Filter.principal

@[simp] theorem mem_principal {s t : Set Œ±} : s ‚àà ùìü t ‚Üî t ‚äÜ s := Iff.rfl

theorem mem_principal_self (s : Set Œ±) : s ‚àà ùìü s := Set.sub_refl _

end Principal

section Join

def join (fs : Filter (Filter Œ±)) : Filter Œ± where
  sets := Set.mk fun s => (Set.mk fun t : Filter Œ± => s ‚àà t) ‚àà fs
  sets_nonempty := by
    obtain ‚ü®x, x_in_fs‚ü© := fs.sets_nonempty
    replace x_in_fs: x ‚àà fs := x_in_fs
    refine ‚ü®Set.univ _, ?_‚ü©
    rw [Set.mk_mem]
    have : (Set.mk fun t: Filter Œ± => Set.univ Œ± ‚àà t) = Set.univ _ := by
      apply Set.ext_univ
      intro f
      apply univ_mem
    rw [this]
    exact univ_mem
  sets_of_superset := by
    simp [Set.mk_mem]
    intro x y mem_fs sub
    apply mem_of_superset
    assumption
    intro f
    simp
    intro hx
    apply mem_of_superset
    assumption
    assumption
  inter_sets := by
    simp [Set.mk_mem]
    intro x y hx hy
    suffices ({ Mem := fun t => x ‚àà t ‚àß y ‚àà t }: Set (Filter _)) = { Mem := fun t => x ‚àà t } ‚à© { Mem := fun t => y ‚àà t } by
      rw [this]
      apply inter_mem
      assumption
      assumption
    ext k
    simp [Set.mem_inter]

@[simp]
theorem mem_join {s : Set Œ±} {f : Filter (Filter Œ±)} : s ‚àà join f ‚Üî (Set.mk fun t => s ‚àà t) ‚àà f :=
  Iff.rfl

end Join

section Order

instance : LE (Filter Œ±) where
  le a b := ‚àÄx ‚àà b, x ‚àà a

def le_def : (f ‚â§ g) = ‚àÄx ‚àà g, x ‚àà f := rfl

instance : LT (Filter Œ±) where
  lt a b := a ‚â§ b ‚àß ¬¨b ‚â§ a

instance : IsPartialOrder (Filter Œ±) where
  lt_iff_le_and_not_le := Iff.refl _
  le_antisymm h‚ÇÅ h‚ÇÇ := by
    apply sets_inj
    apply Set.sub_antisymm
    assumption
    assumption
  le_refl _ := Set.sub_refl _
  le_trans h‚ÇÅ h‚ÇÇ := Set.sub_trans h‚ÇÇ h‚ÇÅ

def not_le : ¬¨f ‚â§ g ‚Üî ‚àÉs ‚àà g, s ‚àâ f := by
  simp [le_def, Classical.not_forall]

end Order

section Generate

/-- `GenerateSets g s`: `s` is in the filter closure of `g`. -/
inductive GenerateSets (g : Set (Set Œ±)) : Set Œ± ‚Üí Prop
  | basic {s : Set Œ±} : s ‚àà g ‚Üí GenerateSets g s
  | univ : GenerateSets g (Set.univ _)
  | superset {s t : Set Œ±} : GenerateSets g s ‚Üí s ‚äÜ t ‚Üí GenerateSets g t
  | inter {s t : Set Œ±} : GenerateSets g s ‚Üí GenerateSets g t ‚Üí GenerateSets g (s ‚à© t)

/-- `generate g` is the largest filter containing the sets `g`. -/
def generate (g : Set (Set Œ±)) : Filter Œ± where
  sets := Set.mk fun s => GenerateSets g s
  sets_nonempty := ‚ü®Set.univ _, GenerateSets.univ‚ü©
  sets_of_superset := GenerateSets.superset
  inter_sets := GenerateSets.inter

def mem_generate_of_mem {s : Set (Set Œ±)} {x : Set Œ±} (h : x ‚àà s) :
    x ‚àà generate s := GenerateSets.basic h

theorem le_generate_iff {s : Set (Set Œ±)} {f : Filter Œ±} : f ‚â§ generate s ‚Üî s ‚äÜ f.sets := by
  apply Iff.intro
  intro sub
  intro s' s'_mem_s
  apply sub
  apply mem_generate_of_mem
  assumption
  intro sub s' mem
  induction mem with
  | basic =>
    apply sub
    assumption
  | univ => apply univ_mem
  | superset =>
    apply mem_of_superset
    assumption
    assumption
  | inter =>
    apply inter_mem
    assumption
    assumption

theorem mem_generate_iff {s : Set (Set Œ±)} {x : Set Œ±} : x ‚àà generate s ‚Üî ‚àÉ t ‚äÜ s, Set.IsFinite t ‚àß ‚ãÇ t ‚äÜ x := by
  apply Iff.intro
  ¬∑ intro mem
    induction mem with
    | @basic s' mem =>
      exists {s'}
      apply And.intro
      intro x mem
      cases Set.mem_singleton.mp mem
      assumption
      apply And.intro
      infer_instance
      simp
    | univ =>
      exists ‚àÖ
      simp
      infer_instance
    | superset _ sub ih  =>
      obtain ‚ü®t, t_sub_s, tfin, sinter_sub‚ü© := ih
      exists t
      simp [Set.sub_trans _ sub, tfin, sinter_sub, t_sub_s]
    | inter _ _ ih‚ÇÄ ih‚ÇÅ =>
      obtain ‚ü®t‚ÇÄ, t‚ÇÄ_sub_s, t‚ÇÄ_fin, sinter_t‚ÇÄ‚ü© := ih‚ÇÄ
      obtain ‚ü®t‚ÇÅ, t‚ÇÅ_sub_s, t‚ÇÅ_fin, sinter_t‚ÇÅ‚ü© := ih‚ÇÅ
      exists t‚ÇÄ ‚à™ t‚ÇÅ
      apply And.intro
      apply (Set.union_sub _ _ _).mp
      apply And.intro <;> assumption
      apply And.intro
      infer_instance
      rw [Set.sInter_union]
      apply Set.inter_sub_inter
      assumption
      assumption
  ¬∑ intro ‚ü®t, t_sub_s, tfin, sinter_sub_x‚ü©
    apply mem_of_superset
    apply (sInter_mem tfin).mpr
    intro y y_in_t
    apply GenerateSets.basic
    apply t_sub_s
    assumption
    assumption

@[simp]
def generate_singleton (s : Set Œ±) : generate {s} = ùìü s := by
  apply le_antisymm
  intro _ ht
  apply mem_of_superset
  apply mem_generate_of_mem
  apply Set.mem_singleton.mpr rfl
  exact ht
  apply le_generate_iff.mpr
  simp [Set.singleton_sub, principal]

end Generate

section Lattice

-- def inf (a b: Filter Œ±) : Filter Œ± where
--   sets := Set.mk fun x => ‚àÉa' ‚àà a, ‚àÉb' ‚àà b, x = a' ‚à© b'
--   sets_nonempty := by
--     have ‚ü®a', a'_mem‚ü©  := a.sets_nonempty
--     have ‚ü®b', b'_mem‚ü©  := b.sets_nonempty
--     refine ‚ü®a' ‚à© b', ?_‚ü©
--     exists a'
--     apply And.intro a'_mem
--     exists b'
--   sets_of_superset := by
--     intro x y memx xsuby
--     obtain ‚ü®a', a'_in_a, b', b'_in_b, x_eq‚ü©  := memx
--     subst x
--     exists a' ‚à™ y
--     apply And.intro
--     apply mem_of_superset
--     assumption
--     apply Set.sub_union_left
--     exists b' ‚à™ y
--     apply And.intro
--     apply mem_of_superset
--     assumption
--     apply Set.sub_union_left
--     rw [‚ÜêSet.union_inter_right]
--     apply Set.sub_antisymm
--     apply Set.sub_union_right
--     apply (Set.union_sub _ _ _).mp
--     apply And.intro
--     assumption
--     rfl
--   inter_sets := by
--     intro x y hx hy
--     obtain ‚ü®xa, xa_in_a, xb, xb_in_b, xeq‚ü© := hx
--     obtain ‚ü®ya, ya_in_a, yb, yb_in_b, yeq‚ü© := hy
--     subst x; subst y
--     exists xa ‚à© ya
--     apply And.intro
--     apply inter_mem
--     assumption
--     assumption
--     exists xb ‚à© yb
--     apply And.intro
--     apply inter_mem
--     assumption
--     assumption
--     ac_rfl

def sInf (fs: Set (Filter Œ±)) :=
  Filter.generate (Set.mk fun s => ‚àÉf: fs -> Set Œ±, (‚àÄx, (f x) ‚àà x.val) ‚àß s = ‚ãÇ(fs.attach.image f))

-- def sInf (fs: Set (Filter Œ±)) : Filter Œ± where
--   sets := Set.mk fun s => ‚àÉf: fs -> Set Œ±, ‚àÉg: ‚àÄx, (f x) ‚àà x.val, s = ‚ãÇ(fs.attach.image f)
--   sets_nonempty := by
--     by_cases hfs:fs.Nonempty
--     exists Set.univ _
--     simp
--     exists (fun _ => Set.univ _)
--     apply And.intro
--     intro
--     apply univ_mem
--     rw [Set.image_const_of_nonempty]
--     simp
--     rw [Set.nonempty_attach]
--     assumption
--     cases Set.not_nonempty _ hfs
--     exists Set.univ _
--     refine ‚ü®fun _ => (Set.univ _), ?_, ?_‚ü©
--     intro h
--     have := Set.not_mem_empty h.property
--     contradiction
--     simp
--   sets_of_superset := by
--     intro x y hx x_sub_y

--     obtain ‚ü®f, g, _‚ü© := hx; subst x
--     refine ‚ü®?_, ?_, ?_‚ü©
--     intro elem
--     let x := f elem
--     have := g elem





--     -- intro x y hx hy
--     -- have hx := Set.mem_sInter.mp hx
--     -- apply Set.mem_sInter.mpr
--     -- intro z hz
--     -- have ‚ü®f, f_in_a, eq‚ü© := Set.mem_image.mp hz
--     -- subst eq
--     -- apply mem_of_superset
--     -- apply hx
--     -- assumption
--     -- assumption
--   inter_sets := by
--     sorry
--     -- intro x y hx hy
--     -- have hx := Set.mem_sInter.mp hx
--     -- have hy := Set.mem_sInter.mp hy
--     -- apply Set.mem_sInter.mpr
--     -- intro z hz
--     -- have ‚ü®f, f_in_a, eq‚ü© := Set.mem_image.mp hz
--     -- subst eq
--     -- apply inter_mem
--     -- apply hx; assumption
--     -- apply hy; assumption

instance : SupSet (Filter Œ±) where
  sSup := join ‚àò ùìü

instance : InfSet (Filter Œ±) := ‚ü®sInf‚ü©

instance : Inf (Filter Œ±) where
  inf a b := sInf {a, b}
instance : Sup (Filter Œ±) where
  sup a b := sSup {a, b}

def mem_inf_iff {a b: Filter Œ±} : ‚àÄ{x}, x ‚àà a ‚äì b ‚Üî ‚àÉxa ‚àà a, ‚àÉxb ‚àà b, x = xa ‚à© xb := by
  intro x
  show _  ‚àà sInf _ ‚Üî _
  rw [mem_sets]
  unfold sInf
  simp
  apply Iff.intro
  intro ‚ü®f, g,_‚ü©; subst x
  exists f ‚ü®_, Set.mem_pair.mpr (.inl rfl)‚ü©
  apply And.intro
  apply g ‚ü®_, _‚ü©
  exists f ‚ü®_, Set.mem_pair.mpr (.inr rfl)‚ü©
  apply And.intro
  apply g ‚ü®_, _‚ü©
  rfl
  intro ‚ü®xa, xa_in_a, xb, xb_in_b, eq‚ü©
  by_cases hab:a = b
  subst b
  exists (fun _ => x)
  apply And.intro
  intro y
  simp
  have : y.val = a := by
    cases y.property <;> (rename_i h; rw [Set.mem_singleton.mpr h])
  rw [this]
  subst x
  apply inter_mem
  assumption
  assumption
  simp
  have : ‚àÄx: ({a, b}: Set _), ‚àÉy, y = xa ‚àß x.val = a ‚à® y = xb ‚àß x.val = b := (fun x => by
    cases Set.mem_pair.mp x.property <;> rename_i h
    exists xa
    left; trivial
    exists xb
    right; trivial)
  replace := Classical.axiomOfChoice this
  obtain ‚ü®f, g‚ü© := this
  exists f
  apply And.intro
  intro y
  ¬∑ rcases g y with ‚ü®_,h‚ü© | ‚ü®_,h‚ü©
    subst xa; rw [h]; assumption
    subst xb; rw [h]; assumption
  rw [eq]
  rcases g ‚ü®_, Set.mem_pair.mpr (.inl rfl)‚ü© with ‚ü®hf,h‚ü© | ‚ü®hf,h‚ü©
  rcases g ‚ü®_, Set.mem_pair.mpr (.inr rfl)‚ü© with ‚ü®hf',h'‚ü© | ‚ü®hf',h'‚ü©
  have := hab h'.symm
  contradiction
  rw [hf, hf']
  have := hab h
  contradiction

def mem_inf_left {a b: Filter Œ±} {s: Set Œ±} : s ‚àà a -> s ‚àà a ‚äì b
| h => mem_inf_iff.mpr ‚ü®s, h, _, univ_mem, by simp‚ü©

def mem_inf_right {a b: Filter Œ±} {s: Set Œ±} : s ‚àà b -> s ‚àà a ‚äì b
| h => mem_inf_iff.mpr ‚ü®_, univ_mem, s, h, by simp‚ü©

def mem_inf_of_inter {a b: Filter Œ±} {s t: Set Œ±} : s ‚àà a -> t ‚àà b -> s ‚à© t ‚àà a ‚äì b
| h, g => mem_inf_iff.mpr ‚ü®_, h, _, g, by simp‚ü©

def top Œ±: Filter Œ± where
  sets := {Set.univ _}
  sets_nonempty := ‚ü®_, Set.mem_singleton.mpr rfl‚ü©
  inter_sets := by
    intro x y hx hy
    cases Set.mem_singleton.mp hx
    simp [hy]
  sets_of_superset := by
    intro x y hx hy
    cases Set.mem_singleton.mp hx
    cases Set.univ_sub _ hy
    simp [Set.mem_singleton]

def bot Œ±: Filter Œ± where
  sets := Set.univ _
  sets_nonempty := ‚ü®_, Set.mem_univ (Set.univ _)‚ü©
  inter_sets := by
    intro x y hx hy
    apply Set.mem_univ
  sets_of_superset := by
    intro x y hx hy
    apply Set.mem_univ

instance : Top (Filter Œ±) := ‚ü®top _‚ü©
instance : Bot (Filter Œ±) := ‚ü®bot _‚ü©

def mem_top (x: Set Œ±) : x ‚àà (‚ä§: Filter Œ±) ‚Üî x = Set.univ _ := Set.mem_singleton

instance : IsCompleteLattice (Filter Œ±) where

end Lattice

end Filter
